pipeline {
    agent {
        node {
            label 'docker-agent-node'
        }
    }

    environment {
        CI = 'true'
        REMOTE_USER = 'vriera-server'
        REMOTE_HOST = '186.139.150.69'
        REMOTE_PORT = '7022'
        REMOTE_DIRECTORY = '/home/vriera-server/redes'
    }
    
    stages {
        stage('Fetch source code') {
            
            steps{ 
                checkout([$class: 'GitSCM', 
                                                branches: [[name: '*/main']],
                                                userRemoteConfigs: [[credentialsId:'ssh-key' , url: 'https://github.com/szavalia/todo-app']]])
            } 
        }

        stage('Resolve dependencies') {
            steps{ 
                echo "Resolving dependenciesüí°"
                cache(maxCacheSize: 250, defaultBranch: 'develop', caches: [
                arbitraryFileCache(path: 'node_modules', cacheValidityDecidingFile: 'yarn.lock')
                ]) {
                     sh '''
                        echo "cache not found, fetching dependencies"
                        yarn install 
                        '''
                }
            } 
        }

        stage('Test') {
            steps { 
                echo "Testing Ô∏èü•ä"
                sh '''
                yarn test
                '''
            }
        }

        stage('Build') {
            steps {
                // You can add your build steps here
                echo "Building üõ†Ô∏è"
                sh '''
                yarn build
                '''
            }
        }

        stage('Select environment') {
            steps {
                script {
                    env.TARGET = input message: 'Select deployment environment', parameters: [choice(name: 'ENVIRONMENT', choices: ['stg', 'prod'])]
                }
            }
        }

        stage('Deploy to staging') {
            when {
                expression { env.TARGET == 'stg' || env.TARGET == 'prod' }
            }
            steps {
                echo "Deploying to staging üöÄ"

                // Copy the build to the remote server
                sshagent(credentials: ['ssh-key']) {
                    sh 'scp -P $REMOTE_PORT -o StrictHostKeyChecking=no -r build/ $REMOTE_USER@$REMOTE_HOST:$REMOTE_DIRECTORY/builds/$BUILD_ID'
                }

                // Deploy the build on the remote server
                sshagent(credentials: ['ssh-key']) {
                    sh '''
                        ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "$REMOTE_DIRECTORY/stage.sh $BUILD_ID"
                    '''
                }
            }
        }

        stage('Test deployment') {
            steps {
                env.STATE="TEST-DEPLOY"
                echo "Testing deployment üß™"
                // Deploy the build on the remote server
                sshagent(credentials: ['ssh-key']) {
                    sh '''
                        ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_DIRECTORY/healtcheck.sh
                    '''
                }
            }
        }

        stage('Deploy') {
            when {
                expression { env.TARGET == 'prod' }
            }
            steps {
                env.STATE="PROD-DEPLOY"
                input(message: 'Deploy to production?', ok: 'Deploy', submitter: 'admin')
                
                echo "Deploying to production üöÄ"

                // Deploy the build on the remote server
                sshagent(credentials: ['ssh-key']) {
                    sh '''
                        ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "$REMOTE_DIRECTORY/deploy.sh $BUILD_ID"
                    '''
                }
            }
        }
    }

    post {
      failure {
        echo "Build failed üòû"
        emailext body: "Build failed üòû", subject: "Build failed üòû", to: 'val-riera@hotmail.com'
        script{
            if(env.STATE == "TEST-DEPLOY")
                echo "failed on check deploy"
        }
      }
      success { 
        echo "Build succeeded üòä"
        emailext body: "Build succeeded üòä", subject: "Build succeeded üòä", to: 'val-riera@hotmail.com'
        script{
            if(env.STATE == "PROD-DEPLOY")
                echo "success on check deploy"
        }
      }
    }
}